#!/bin/bash

# Script para solucionar el conflicto de git pull en el VPS
# Limpia archivos target/ y permite el pull exitoso

echo "=== SOLUCIONANDO CONFLICTO DE GIT PULL ==="
echo "Fecha: $(date)"
echo

# Verificar que estamos en el directorio correcto
if [ ! -f "pom.xml" ]; then
    echo "‚ùå ERROR: No se encuentra pom.xml. Aseg√∫rate de estar en el directorio del proyecto."
    exit 1
fi

echo "‚úÖ Directorio del proyecto confirmado"
echo

# Mostrar estado actual de git
echo "üìã Estado actual de Git:"
git status --porcelain
echo

# Limpiar directorio target/ completamente
echo "üßπ Limpiando directorio target/..."
if [ -d "target" ]; then
    rm -rf target/
    echo "‚úÖ Directorio target/ eliminado"
else
    echo "‚ÑπÔ∏è Directorio target/ no existe"
fi
echo

# Limpiar archivos temporales de Maven
echo "üßπ Limpiando archivos temporales..."
find . -name "*.tmp" -delete 2>/dev/null || true
find . -name "*.log" -delete 2>/dev/null || true
echo "‚úÖ Archivos temporales limpiados"
echo

# Verificar archivos no rastreados
echo "üîç Verificando archivos no rastreados..."
UNTRACKED=$(git ls-files --others --exclude-standard)
if [ -n "$UNTRACKED" ]; then
    echo "üìÅ Archivos no rastreados encontrados:"
    echo "$UNTRACKED"
    echo
    
    # Preguntar si eliminar archivos no rastreados
    read -p "¬øEliminar todos los archivos no rastreados? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        git clean -fd
        echo "‚úÖ Archivos no rastreados eliminados"
    else
        echo "‚ÑπÔ∏è Archivos no rastreados mantenidos"
    fi
else
    echo "‚úÖ No hay archivos no rastreados"
fi
echo

# Intentar git pull
echo "üì• Intentando git pull..."
if git pull; then
    echo "‚úÖ Git pull exitoso"
else
    echo "‚ùå Git pull fall√≥. Intentando reset hard..."
    
    # Mostrar informaci√≥n del remote
    echo "üìã Informaci√≥n del repositorio remoto:"
    git remote -v
    git branch -a
    echo
    
    # Preguntar si hacer reset hard
    read -p "¬øHacer git reset --hard origin/main? ESTO ELIMINAR√Å CAMBIOS LOCALES (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        git fetch origin
        git reset --hard origin/main
        echo "‚úÖ Reset hard completado"
    else
        echo "‚ùå Reset cancelado. Resuelve manualmente los conflictos."
        exit 1
    fi
fi
echo

# Verificar estado final
echo "üîç Estado final de Git:"
git status
echo

# Recompilar proyecto
echo "üî® Recompilando proyecto..."
if command -v mvn &> /dev/null; then
    mvn clean package -DskipTests
    if [ $? -eq 0 ]; then
        echo "‚úÖ Compilaci√≥n exitosa"
        
        # Verificar que el WAR se gener√≥ correctamente
        if [ -f "target/pdf-signer-war-1.0.war" ]; then
            echo "‚úÖ WAR generado: target/pdf-signer-war-1.0.war"
            
            # Verificar web.xml
            if unzip -l target/pdf-signer-war-1.0.war | grep -q "WEB-INF/web.xml"; then
                echo "‚úÖ web.xml presente en el WAR"
            else
                echo "‚ùå web.xml NO encontrado en el WAR"
            fi
        else
            echo "‚ùå WAR no generado"
        fi
    else
        echo "‚ùå Error en la compilaci√≥n"
    fi
else
    echo "‚ö†Ô∏è Maven no encontrado. Compila manualmente con: mvn clean package -DskipTests"
fi
echo

echo "=== PROCESO COMPLETADO ==="
echo "‚úÖ Conflicto de git pull resuelto"
echo "üìã Pr√≥ximos pasos:"
echo "   1. Verificar que el c√≥digo est√© actualizado"
echo "   2. Compilar si no se hizo autom√°ticamente: mvn clean package -DskipTests"
echo "   3. Desplegar usando: ./deploy-fixed-war.sh o ./deploy-fixed-war.ps1"
echo